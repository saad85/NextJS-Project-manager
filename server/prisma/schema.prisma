generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            String  @id @default(uuid())
  cognitoId         String  @unique
  username          String  @unique
  profilePictureUrl String?
  teamId            String?

  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  team            Team?            @relation(fields: [teamId], references: [id])
}

model Team {
  id                   String        @id @default(uuid())
  teamName             String
  productOwnerUserId   String?
  projectManagerUserId String?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id           String        @id @default(uuid())
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        String  @id @default(uuid())
  teamId    String
  projectId String
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

enum TaskStatus {
  ToDo
  WorkInProgress
  UnderReview
  Completed
}

enum TaskPriority {
  Urgent
  High
  Medium
  Low
  Backlog
}

model Task {
  id             String       @id @default(uuid())
  title          String
  description    String?
  status         TaskStatus  @default(ToDo)
  priority       TaskPriority @default(Backlog)
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      String
  authorUserId   String
  assignedUserId String?

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     String @id @default(uuid())
  userId String
  taskId String

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           String @id @default(uuid())
  fileURL      String
  fileName     String?
  taskId       String
  uploadedById String

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     String @id @default(uuid())
  text   String
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}